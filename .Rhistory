readQAP<-function(name){
a <- read.delim(name,header=FALSE, sep ="")
n<-as.integer(a[1,1])
fl<-a[2:(n+1),1:n]
dis<-a[(n+2):(n+n+1),1:n]
d <- list(n=n, f= fl, d = dis)
return(d)
}
evaluarQAP<-function(sol, f, d){
acum<-0
n<-length(sol)
for(i in 1:n){
for(j in 1:n){
acum = acum + f[i,j]*d[sol[i],sol[j]]
}
}
return(acum)
}
swap<-function(sol,i,j){
piv<-sol[i]
sol[i]<-sol[j]
sol[j]<-piv
return(sol)
}
#Agregado por Seba
insercion<-function(sol,i,j){#i de 1 a lenth(sol), j de 0 a length(sol)-1
ele<-sol[i]
a<-sol[-i]
sol<-append(a,ele,after=j)
#print(sol)
return(sol)
}
invertir<-function(sol,i,j){
a<-sol[i:j]
a<-rev(a)
b<-sol[-(i:j)]
sol<-append(b,a,after=i)
#print(sol)
return(sol)
}
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("./geneticoQAP.dat")
sol<-c(1:instancia$n)
print(sol)
fitness<-evaluarQAP(sol,instancia$f,instancia$d)
fitness
# LABORATORIO 4 - Metaheurísticas de Población - 26-10-2023
# Implementar algoritmo genético para el problema QAP en R,
# usando la plantilla de código entregada a continuación
# (Puede modificarla si lo desea)
# Hacer un gráfico de cajas con la evolución del fitness de la población
# a través de las generaciones
inicializar<-function(n,f,d,tamano){
soluciones <- list()
suma <- 0
for (i in 1:tamano){
sol <- sample(1:n)
fitness <- evaluarQAP(sol,f,d)
suma <- suma + fitness
solucion <- list(sol=sol, fitness=fitness,prob=0)
soluciones <- append(soluciones,list(solucion))
}
return (soluciones)
}
get_probs <- function(soluciones,suma){
for (j in 1:length(soluciones)){
soluciones[[j]]$prob <- 1-(soluciones[[j]]$fitness/suma)
}
return(soluciones)
}
evaluar<-function(soluciones,f,d){
tamano <- length(soluciones)
suma <- 0
for (i in 1:tamano){
soluciones[[i]]$fitness <- evaluarQAP(soluciones[[i]]$sol,f,d)
suma <- soluciones[[i]]$fitness + suma
}
soluciones <- get_probs(soluciones,suma)
return (soluciones)
}
#peso = 1-la wea normalizada
seleccion<-function(poblacion,n){
probs <- c()
for (i in 1:length(poblacion)){
probs <- c(probs, poblacion[[i]]$probs)
}
elegidos <- sample(poblacion,n,prob=probs)
return (elegidos)
}
recombinacion<-function(){
}
mutacion<-function(){
}
soluciones2 <- inicializar(instancia$n,instancia$f,instancia$d,10)
soluciones2 <- evaluar(soluciones2,instancia$f,instancia$d)
elegido <- seleccion(soluciones2)
genetico<-function(){
n<-instancia$n
poblacion<-inicializar()
poblacion<-evaluar()
i=0
while(condicion_termino){
# Generación i
padres<-seleccion()
hijos<-recombinacion()
hijos<-mutacion()
hijos<-evaluar()
poblacion<-hijos+padres
i=i+1
}
return(poblacion)
}
readQAP<-function(name){
a <- read.delim(name,header=FALSE, sep ="")
n<-as.integer(a[1,1])
fl<-a[2:(n+1),1:n]
dis<-a[(n+2):(n+n+1),1:n]
d <- list(n=n, f= fl, d = dis)
return(d)
}
evaluarQAP<-function(sol, f, d){
acum<-0
n<-length(sol)
for(i in 1:n){
for(j in 1:n){
acum = acum + f[i,j]*d[sol[i],sol[j]]
}
}
return(acum)
}
swap<-function(sol,i,j){
piv<-sol[i]
sol[i]<-sol[j]
sol[j]<-piv
return(sol)
}
#Agregado por Seba
insercion<-function(sol,i,j){#i de 1 a lenth(sol), j de 0 a length(sol)-1
ele<-sol[i]
a<-sol[-i]
sol<-append(a,ele,after=j)
#print(sol)
return(sol)
}
invertir<-function(sol,i,j){
a<-sol[i:j]
a<-rev(a)
b<-sol[-(i:j)]
sol<-append(b,a,after=i)
#print(sol)
return(sol)
}
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
sol<-c(1:instancia$n)
print(sol)
fitness<-evaluarQAP(sol,instancia$f,instancia$d)
fitness
# LABORATORIO 4 - Metaheurísticas de Población - 26-10-2023
# Implementar algoritmo genético para el problema QAP en R,
# usando la plantilla de código entregada a continuación
# (Puede modificarla si lo desea)
# Hacer un gráfico de cajas con la evolución del fitness de la población
# a través de las generaciones
inicializar<-function(n,f,d,tamano){
soluciones <- list()
suma <- 0
for (i in 1:tamano){
sol <- sample(1:n)
fitness <- evaluarQAP(sol,f,d)
suma <- suma + fitness
solucion <- list(sol=sol, fitness=fitness,prob=0)
soluciones <- append(soluciones,list(solucion))
}
return (soluciones)
}
get_probs <- function(soluciones,suma){
for (j in 1:length(soluciones)){
soluciones[[j]]$prob <- 1-(soluciones[[j]]$fitness/suma)
}
return(soluciones)
}
evaluar<-function(soluciones,f,d){
tamano <- length(soluciones)
suma <- 0
for (i in 1:tamano){
soluciones[[i]]$fitness <- evaluarQAP(soluciones[[i]]$sol,f,d)
suma <- soluciones[[i]]$fitness + suma
}
soluciones <- get_probs(soluciones,suma)
return (soluciones)
}
#peso = 1-la wea normalizada
seleccion<-function(poblacion,n){
probs <- c()
for (i in 1:length(poblacion)){
probs <- c(probs, poblacion[[i]]$probs)
}
elegidos <- sample(poblacion,n,prob=probs)
return (elegidos)
}
recombinacion<-function(){
}
mutacion<-function(){
}
soluciones2 <- inicializar(instancia$n,instancia$f,instancia$d,10)
soluciones2 <- evaluar(soluciones2,instancia$f,instancia$d)
elegido <- seleccion(soluciones2)
genetico<-function(){
n<-instancia$n
poblacion<-inicializar()
poblacion<-evaluar()
i=0
while(condicion_termino){
# Generación i
padres<-seleccion()
hijos<-recombinacion()
hijos<-mutacion()
hijos<-evaluar()
poblacion<-hijos+padres
i=i+1
}
return(poblacion)
}
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("/geneticoQAP.dat")
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("../Alg_genetico/geneticoQAP.dat")
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("./../Alg_genetico/geneticoQAP.dat")
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
readQAP<-function(name){
a <- read.delim(name,header=FALSE, sep ="")
n<-as.integer(a[1,1])
fl<-a[2:(n+1),1:n]
dis<-a[(n+2):(n+n+1),1:n]
d <- list(n=n, f= fl, d = dis)
return(d)
}
evaluarQAP<-function(sol, f, d){
acum<-0
n<-length(sol)
for(i in 1:n){
for(j in 1:n){
acum = acum + f[i,j]*d[sol[i],sol[j]]
}
}
return(acum)
}
swap<-function(sol,i,j){
piv<-sol[i]
sol[i]<-sol[j]
sol[j]<-piv
return(sol)
}
#Agregado por Seba
insercion<-function(sol,i,j){#i de 1 a lenth(sol), j de 0 a length(sol)-1
ele<-sol[i]
a<-sol[-i]
sol<-append(a,ele,after=j)
#print(sol)
return(sol)
}
invertir<-function(sol,i,j){
a<-sol[i:j]
a<-rev(a)
b<-sol[-(i:j)]
sol<-append(b,a,after=i)
#print(sol)
return(sol)
}
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
sol<-c(1:instancia$n)
print(sol)
fitness<-evaluarQAP(sol,instancia$f,instancia$d)
fitness
# LABORATORIO 4 - Metaheurísticas de Población - 26-10-2023
# Implementar algoritmo genético para el problema QAP en R,
# usando la plantilla de código entregada a continuación
# (Puede modificarla si lo desea)
# Hacer un gráfico de cajas con la evolución del fitness de la población
# a través de las generaciones
inicializar<-function(n,f,d,tamano){
soluciones <- list()
suma <- 0
for (i in 1:tamano){
sol <- sample(1:n)
fitness <- evaluarQAP(sol,f,d)
suma <- suma + fitness
solucion <- list(sol=sol, fitness=fitness,prob=0)
soluciones <- append(soluciones,list(solucion))
}
return (soluciones)
}
get_probs <- function(soluciones,suma){
for (j in 1:length(soluciones)){
soluciones[[j]]$prob <- 1-(soluciones[[j]]$fitness/suma)
}
return(soluciones)
}
evaluar<-function(soluciones,f,d){
tamano <- length(soluciones)
suma <- 0
for (i in 1:tamano){
soluciones[[i]]$fitness <- evaluarQAP(soluciones[[i]]$sol,f,d)
suma <- soluciones[[i]]$fitness + suma
}
soluciones <- get_probs(soluciones,suma)
return (soluciones)
}
#peso = 1-la wea normalizada
seleccion<-function(poblacion,n){
probs <- c()
for (i in 1:length(poblacion)){
probs <- c(probs, poblacion[[i]]$probs)
}
elegidos <- sample(poblacion,n,prob=probs)
return (elegidos)
}
recombinacion<-function(){
}
mutacion<-function(){
}
soluciones2 <- inicializar(instancia$n,instancia$f,instancia$d,10)
soluciones2 <- evaluar(soluciones2,instancia$f,instancia$d)
elegido <- seleccion(soluciones2)
genetico<-function(){
n<-instancia$n
poblacion<-inicializar()
poblacion<-evaluar()
i=0
while(condicion_termino){
# Generación i
padres<-seleccion()
hijos<-recombinacion()
hijos<-mutacion()
hijos<-evaluar()
poblacion<-hijos+padres
i=i+1
}
return(poblacion)
}
readQAP<-function(name){
a <- read.delim(name,header=FALSE, sep ="")
n<-as.integer(a[1,1])
fl<-a[2:(n+1),1:n]
dis<-a[(n+2):(n+n+1),1:n]
d <- list(n=n, f= fl, d = dis)
return(d)
}
evaluarQAP<-function(sol, f, d){
acum<-0
n<-length(sol)
for(i in 1:n){
for(j in 1:n){
acum = acum + f[i,j]*d[sol[i],sol[j]]
}
}
return(acum)
}
swap<-function(sol,i,j){
piv<-sol[i]
sol[i]<-sol[j]
sol[j]<-piv
return(sol)
}
#Agregado por Seba
insercion<-function(sol,i,j){#i de 1 a lenth(sol), j de 0 a length(sol)-1
ele<-sol[i]
a<-sol[-i]
sol<-append(a,ele,after=j)
#print(sol)
return(sol)
}
invertir<-function(sol,i,j){
a<-sol[i:j]
a<-rev(a)
b<-sol[-(i:j)]
sol<-append(b,a,after=i)
#print(sol)
return(sol)
}
swap<-function(sol){
pos <- sort(sample(1:length(sol),2))
temp <- sol[pos[1]]
sol[pos[1]] <- sol[pos[2]]
sol[pos[2]] <- temp
return(sol)
}
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
sol<-c(1:instancia$n)
print(sol)
fitness<-evaluarQAP(sol,instancia$f,instancia$d)
fitness
# LABORATORIO 4 - Metaheurísticas de Población - 26-10-2023
# Implementar algoritmo genético para el problema QAP en R,
# usando la plantilla de código entregada a continuación
# (Puede modificarla si lo desea)
# Hacer un gráfico de cajas con la evolución del fitness de la población
# a través de las generaciones
inicializar<-function(n,f,d,tamano){
soluciones <- list()
suma <- 0
for (i in 1:tamano){
sol <- sample(1:n)
fitness <- evaluarQAP(sol,f,d)
suma <- suma + fitness
solucion <- list(sol=sol, fitness=fitness,prob=0)
soluciones <- append(soluciones,list(solucion))
}
return (soluciones)
}
get_probs <- function(soluciones,suma){
for (j in 1:length(soluciones)){
soluciones[[j]]$prob <- 1-(soluciones[[j]]$fitness/suma)
}
return(soluciones)
}
evaluar<-function(soluciones,f,d){
tamano <- length(soluciones)
suma <- 0
for (i in 1:tamano){
soluciones[[i]]$fitness <- evaluarQAP(soluciones[[i]]$sol,f,d)
suma <- soluciones[[i]]$fitness + suma
}
soluciones <- get_probs(soluciones,suma)
return (soluciones)
}
#peso = 1-la wea normalizada
seleccion<-function(poblacion,n){
probs <- c()
for (i in 1:length(poblacion)){
probs <- c(probs, poblacion[[i]]$probs)
}
elegidos <- sample(poblacion,n,prob=probs)
return (elegidos)
}
recombinacion<-function(){
}
#porcentaje es un número entre 0 y 1 el cual indica la cantidad de mutaciones a realizar
mutacion<-function(soluciones,porcentaje){
n <- length(soluciones)
mutar <- soluciones * porcentaje %% 100
sol_a_mutar <- sample(1:mutar)
for (i in sol_a_mutar){
soluciones[sol_a_mutar[i]] <- swap(soluciones[sol_a_mutar[i]])
}
return (soluciones)
}
soluciones2 <- inicializar(instancia$n,instancia$f,instancia$d,10)
soluciones2 <- evaluar(soluciones2,instancia$f,instancia$d)
elegido <- seleccion(soluciones2)
genetico<-function(){
n<-instancia$n
poblacion<-inicializar()
poblacion<-evaluar()
i=0
while(condicion_termino){
# Generación i
padres<-seleccion()
hijos<-recombinacion()
hijos<-mutacion()
hijos<-evaluar()
poblacion<-hijos+padres
i=i+1
}
return(poblacion)
}
#leer instancia, crear y evaluar una solucion inicial
instancia<-readQAP("geneticoQAP.dat")
